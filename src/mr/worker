package mr

import "os"
import "log"
import "net/rpc"
import "hash/fnv"
import "fmt"
import "io/ioutil"
import "encoding/json"
import "strconv"

//
// Map functions return a slice of KeyValue.
//
type KeyValue struct {
	Key   string
	Value string
}

type ByKey []KeyValue
//
// use ihash(key) % NReduce to choose the reduce
// task number for each KeyValue emitted by Map.
//
func ihash(key string) int {
	h := fnv.New32a()
	h.Write([]byte(key))
	return int(h.Sum32() & 0x7fffffff)
}


//
// main/mrworker.go calls this function.
//
func Worker(mapf func(string, string) []KeyValue,
	reducef func(string, []string) string) {
	//linb code
	task := Call_task()
	nReduce := CallExample()
	fmt.Printf("nReduce %v\n", nReduce)
	filename := task.File
	file, err := os.Open(filename)
	if err != nil {
		log.Fatalf("cannot open %v", filename)
	}
	content, err := ioutil.ReadAll(file)
	if err != nil {
		log.Fatalf("cannot read %v", filename)
	}
	file.Close()
	kva := mapf(filename, string(content))
	for _, kv := range kva {
		red_num := ihash(kv.Key)%nReduce
		mapstr := strconv.Itoa(task.Task_ID)
		redstr := strconv.Itoa(red_num)
		mapfile_name := fmt.Sprintf("mr-%s-%s.json", mapstr,redstr)
		mapfile, err := os.OpenFile(mapfile_name, os.O_CREATE|os.O_RDWR, 0755)
		if err != nil{
			log.Fatalf("1open file %v failed, %v", mapfile_name, err)
		}
		dec := json.NewDecoder(mapfile)
		v := make(map[string]int, 0)
		err = dec.Decode(&v)
		mapfile.Close()
		os.Remove(mapfile_name)
		mapfile, err = os.OpenFile(mapfile_name, os.O_CREATE|os.O_RDWR, 0755)
		if err != nil{
			log.Fatalf("2open file %v failed, %v", mapfile_name, err)
		}
		enc := json.NewEncoder(mapfile)
		kv_json := make(map[string]int, 0)
		kv_json[kv.Key] = 1
		//fmt.Printf("key: %v  value: %v\n", kv.Key, kv_json[kv.Key])
		for key, value := range v{
			if val, ok := kv_json[key]; ok{
				kv_json[key] = val+value
			}else {
				kv_json[key] = value
			}
		}
		err = enc.Encode(kv_json)
		if err != nil{
			log.Fatalf("json encode failed")
		}
		mapfile.Close()
	}
	//if error != nil {
	//	log.Fatalf("cannot connect with master")	
	//}
	//linb code
	// Your worker implementation here.

	// uncomment to send the Example RPC to the master.
	// CallExample()

}

//
// example function to show how to make an RPC call to the master.
//
// the RPC argument and reply types are defined in rpc.go.
//
func CallExample() int {

	// declare an argument structure.
	args := ExampleArgs{}

	// fill in the argument(s).
	args.X = 99

	// declare a reply structure.
	reply := ExampleReply{}

	// send the RPC request, wait for the reply.
	call("Master.Example", &args, &reply)

	// reply.Y should be 100.
	fmt.Printf("reply.Y %v\n", reply.Y)
	return reply.Y
}

func Call_task() *Task  {
	args := Task{}
	reply := Task{}

	//send RPC request to get a task
	call("Master.Assign_task", &args, &reply)

	return &reply
}

//
// send an RPC request to the master, wait for the response.
// usually returns true.
// returns false if something goes wrong.
//
func call(rpcname string, args interface{}, reply interface{}) bool {
	// c, err := rpc.DialHTTP("tcp", "127.0.0.1"+":1234")
	sockname := masterSock()
	c, err := rpc.DialHTTP("unix", sockname)
	if err != nil {
		log.Fatal("dialing:", err)
	}
	defer c.Close()

	err = c.Call(rpcname, args, reply)
	if err == nil {
		return true
	}

	fmt.Println(err)
	return false
}
